[{"D:\\rx-test\\rx-test\\src\\pages\\questions\\index.js":"1","D:\\rx-test\\rx-test\\src\\pages\\index.js":"2"},{"size":4174,"mtime":1642205404313,"results":"3","hashOfConfig":"4"},{"size":2327,"mtime":1642186963744,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1qi3db7",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\rx-test\\rx-test\\src\\pages\\questions\\index.js",["11"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Card,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardRow\r\n} from '../../elements/card'\r\nimport {\r\n  EndGameButtons,\r\n  QuestionButton\r\n} from '../../elements/buttons'\r\nimport {\r\n  IoIosRefresh,\r\n  IoIosFlag\r\n} from 'react-icons/io'\r\nimport {\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalSpan\r\n} from '../../elements/modal'\r\nimport { Main } from '../../elements/main-frame'\r\nimport { MainRow } from '../../elements/layout'\r\nimport { useRouter } from 'next/router'\r\nimport { question } from '../../questions'\r\nconst Question = () => {\r\n  const [show, toggleShow] = useState('none')\r\n  const [win, toggleShowWin] = useState('none')\r\n  const [pickQuestion, setPickQuestion] = useState([])\r\n  const [questionNumber, setQuestionNumber] = useState(0)\r\n  const [count, setCount] = useState(0)\r\n  const router = useRouter()\r\n\r\n  const pickRandom = async () => {\r\n    const random = (Math.floor(Math.random() * question.length))\r\n    if (count <= 9) {\r\n      await setPickQuestion(question[random])\r\n      question.splice(random, 1)\r\n    }\r\n  }\r\n\r\n  const sendAnswer = async (a) => {\r\n    if (pickQuestion.answer === a) {\r\n      pickRandom()\r\n      setCount(count + 1)\r\n      setQuestionNumber(questionNumber + 1)\r\n    }\r\n    if (pickQuestion.answer !== a) {\r\n      toggleShow('flex')\r\n    }\r\n    if (pickQuestion.answer === a && count === 10) {\r\n      toggleShowWin('flex')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    pickRandom()\r\n    setQuestionNumber(1)\r\n    setCount(0)\r\n  }, [])\r\n  return (\r\n    <Main>\r\n      <MainRow>\r\n        <Card>\r\n          <CardRow>\r\n            <CardHeader onClick={() => setCount(count + 1)}>\r\n              PERGUNTA {questionNumber}\r\n            </CardHeader>\r\n            <CardRow>\r\n              <ModalSpan>você acertou {count} perguntas</ModalSpan>\r\n            </CardRow>\r\n          </CardRow>\r\n          <CardRow>\r\n            <h4>\r\n              {pickQuestion.question}\r\n            </h4>\r\n          </CardRow>\r\n\r\n          <CardFooter>\r\n            <QuestionButton onClick={() => sendAnswer(pickQuestion.alternatives[0].a)}>\r\n              {pickQuestion.alternatives\r\n                ? pickQuestion.alternatives[0].a\r\n                : ''}\r\n            </QuestionButton>\r\n            <QuestionButton onClick={() => sendAnswer(pickQuestion.alternatives[0].b)}>\r\n              {pickQuestion.alternatives\r\n                ? pickQuestion.alternatives[0].b\r\n                : ''}\r\n            </QuestionButton>\r\n            <QuestionButton onClick={() => sendAnswer(pickQuestion.alternatives[0].c)}>\r\n              {pickQuestion.alternatives\r\n                ? pickQuestion.alternatives[0].c\r\n                : ''}\r\n            </QuestionButton>\r\n            <QuestionButton onClick={() => sendAnswer(pickQuestion.alternatives[0].d)}>\r\n              {pickQuestion.alternatives\r\n                ? pickQuestion.alternatives[0].d\r\n                : ''}\r\n            </QuestionButton>\r\n          </CardFooter>\r\n          <Modal show={show}>\r\n            <ModalContent>\r\n              <ModalHeader>\r\n                FIM DE JOGO\r\n              </ModalHeader>\r\n              <ModalBody>\r\n\r\n                <EndGameButtons onClick={() => router.push('/')}>\r\n                  <IoIosFlag /> DESISTIR\r\n                </EndGameButtons>\r\n\r\n                <EndGameButtons onClick={() => router.reload()}>\r\n                  <IoIosRefresh /> REINICIAR\r\n                </EndGameButtons>\r\n\r\n              </ModalBody>\r\n            </ModalContent>\r\n          </Modal>\r\n          <Modal show={win}>\r\n            <ModalContent>\r\n              <ModalHeader>\r\n                VOCÊ VENCEU\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <EndGameButtons onClick={() => router.push('/')}>\r\n                  <IoIosFlag /> SAIR\r\n                </EndGameButtons>\r\n\r\n                <EndGameButtons onClick={() => router.reload()}>\r\n                  <IoIosRefresh /> REFAZER\r\n                </EndGameButtons>\r\n              </ModalBody>\r\n            </ModalContent>\r\n          </Modal>\r\n        </Card>\r\n\r\n      </MainRow>\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default Question\r\n","D:\\rx-test\\rx-test\\src\\pages\\index.js",[],{"ruleId":"12","severity":1,"message":"13","line":61,"column":6,"nodeType":"14","endLine":61,"endColumn":8,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pickRandom'. Either include it or remove the dependency array.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [pickRandom]",{"range":"19","text":"20"},[1541,1543],"[pickRandom]"]